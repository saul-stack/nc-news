GET /api/topics
Responds 200 with array 'topics' of objects with properties: 'slug', 'description'

GET /api
Responds 200 with object 'endpoints' of objects representing available endpoints, with properties:

    'path',             - path/name of the endpoint
    'queries'           - which queries are accepted
    'method',           - accepted request methods
    'format'            - what format the request body needs to adhere to.
    'description'       - a brief description of the purpose and functionality of the endpoint.
    'example response'  - what an example response looks like. 

    


GET /api/articles

    get array of article objects, each has keys:
        author
        title
        article_id
        topic
        created_at
        votes
        article_img_url
        comment_count, which is the total count of all the comments with this article_id. You should make use of queries to the database in order to achieve this.



In addition:

    the articles should be sorted by date in descending order.
    there should not be a body property present on any of the article objects.
Consider what errors could occur with this endpoint, and make sure to test for them.
Remember to add a description of this endpoint to your /api endpoint. 





props.every(prop => obj.hasOwnProperty(prop));